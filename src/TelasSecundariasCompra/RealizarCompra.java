/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TelasSecundariasCompra;

import TelasSecundariasFuncionarios.TelaCadastroValeCompras;
import codigo.Autenticar;
import codigo.Cliente;
import codigo.Jogo;
import codigo.ValeCompras;
import static codigo.ValidarNumeroCartaoDeCredito.getCardID;
import static codigo.ValidarNumeroCartaoDeCredito.getCardName;
import static codigo.ValidarNumeroCartaoDeCredito.validCC;
import codigo.ValidarValeCompras;
import codigo.Venda;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import static java.lang.System.exit;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.text.MaskFormatter;
import java.io.Serializable;

public class RealizarCompra extends javax.swing.JFrame implements Serializable {

    ArrayList<Jogo> jogos = new ArrayList<>();
    String mid = "";
    public static String nomeJogo;
    public static double valorRestante = 0;//valor que falta caso o cliente compre com vale-compras
    public static String formaRestante = "-";//valor que resta caso cliente Compra com vale compras e o valor do vale compras não quita todo o precoTotal do jogo

    public RealizarCompra() {
        initComponents();
        CampoValor.setEditable(false);
        Comprar.setVisible(false);

    }

    public static String getNomeJogo() {
        return nomeJogo;
    }

    public static void setNomeJogo(String nomeJogo) {
        RealizarCompra.nomeJogo = nomeJogo;
    }

    /**
     * Método insere em um arquivo as compras que precisam ser confirmadas
     *
     * @param compra
     */
    public void gerarConfirmacaoDeCompra(String compra) {

        File arq = new File("dadosComprasPendentes.txt");
        //gravar dados do arquivo em um ArrayList
        if (!arq.exists()) {

            try {
                if (arq.createNewFile()) {
                    System.out.println("O arquivo foi criado");
                } else {
                    System.out.println("O arquivo não foi criado");
                }
            } catch (IOException ex) {
                Logger.getLogger(RealizarCompra.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        try {

            try (FileWriter fw = new FileWriter(arq, true); BufferedWriter out = new BufferedWriter(fw)) {
                out.write(compra);
                out.newLine();
                out.flush();
                out.close();
            }

        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Midia = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        compraJogo = new javax.swing.JLabel();
        nome = new javax.swing.JLabel();
        valor = new javax.swing.JLabel();
        CampoValor = new javax.swing.JTextField();
        Cancelar = new javax.swing.JButton();
        Comprar = new javax.swing.JButton();
        bPesquisar = new javax.swing.JButton();
        formaPagamento = new javax.swing.JComboBox<>();
        mFisica = new javax.swing.JRadioButton();
        mDigital = new javax.swing.JRadioButton();
        JCNomeJogos = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jFTDataCompra = new javax.swing.JFormattedTextField();
        CampoQuantidade = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        compraJogo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        compraJogo.setText("Comprar um jogo");

        nome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nome.setText("Nome:");

        valor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        valor.setText("Valor:");

        CampoValor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CampoValor.setMinimumSize(new java.awt.Dimension(10, 30));
        CampoValor.setPreferredSize(new java.awt.Dimension(6, 30));
        CampoValor.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                CampoValorComponentShown(evt);
            }
        });
        CampoValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoValorActionPerformed(evt);
            }
        });

        Cancelar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Cancelar.setText("Cancelar");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });

        Comprar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Comprar.setText("Comprar");
        Comprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComprarActionPerformed(evt);
            }
        });

        bPesquisar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bPesquisar.setText("Pesquisar");
        bPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPesquisarActionPerformed(evt);
            }
        });

        formaPagamento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        formaPagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione uma forma de pagamento", "Cartão de crédito", "Cartão de débito", "Vale-compra", "Dinheiro" }));

        Midia.add(mFisica);
        mFisica.setText("Mídia Fisica");
        mFisica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mFisicaActionPerformed(evt);
            }
        });

        Midia.add(mDigital);
        mDigital.setText("Mídia Digital");
        mDigital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mDigitalActionPerformed(evt);
            }
        });

        JCNomeJogos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        JCNomeJogos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione" }));
        JCNomeJogos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCNomeJogosActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Data:");

        jFTDataCompra.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        jFTDataCompra.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        CampoQuantidade.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CampoQuantidade.setMinimumSize(new java.awt.Dimension(10, 30));
        CampoQuantidade.setPreferredSize(new java.awt.Dimension(6, 30));
        CampoQuantidade.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                CampoQuantidadeComponentShown(evt);
            }
        });
        CampoQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoQuantidadeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Quantidade:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(valor)
                                    .addComponent(compraJogo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Comprar))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(76, 76, 76)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(JCNomeJogos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(CampoValor, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(bPesquisar))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(Cancelar)
                                                .addComponent(formaPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jFTDataCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(CampoQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(75, 75, 75)
                                        .addComponent(nome)))
                                .addGap(0, 20, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mFisica)
                .addGap(36, 36, 36)
                .addComponent(mDigital)
                .addGap(168, 168, 168))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(compraJogo)
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nome)
                    .addComponent(bPesquisar)
                    .addComponent(JCNomeJogos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valor)
                    .addComponent(CampoValor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formaPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jFTDataCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CampoQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mFisica)
                    .addComponent(mDigital))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cancelar)
                    .addComponent(Comprar))
                .addGap(46, 46, 46))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComprarActionPerformed
        ArrayList<Venda> relatorio = new ArrayList<>();

        String nome = JCNomeJogos.getSelectedItem().toString();
        // String formaPgtoRestante = "";
        setNomeJogo(nome);
        double precoUnitario = 0;
        double precoTotal = 0;
        int qtde = 0;
        int cont = 0;
        if (!CampoQuantidade.getText().equals("") && !CampoValor.getText().equals("") && !formaPagamento.getSelectedItem().toString().equals("Selecione uma forma de pagamento")
                && !jFTDataCompra.getText().equals("") && !CampoQuantidade.getText().equals("") && (mFisica.isSelected() || mDigital.isSelected())) {
            try {
                qtde = Integer.parseInt(CampoQuantidade.getText());
                System.out.println("qtde=" + qtde);
                precoUnitario = Double.parseDouble(CampoValor.getText());
                precoTotal = Double.parseDouble(CampoValor.getText()) * Double.parseDouble(CampoQuantidade.getText());
                if (precoTotal <= 0) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um valor de quantidade válido!");
                    CampoQuantidade.setText("");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Por favor, insira um valor de quantidade válido!");
                CampoQuantidade.setText("");
            }
            String midia = "";
            String forma = (String) formaPagamento.getSelectedItem();
            String dataCompra = jFTDataCompra.getText();

            File arq = new File("dadosCompras.txt");

            if (mFisica.isSelected()) {
                midia = mFisica.getText();
            } else if (mDigital.isSelected()) {
                midia = mDigital.getText();
            }
            System.out.println("Midia Fisica: " + midia);
             int aux = 0;
            if (midia.equals("Mídia Fisica")) {
                System.out.println("verifica estoque:" + verificaEstoque());
                int stq = verificaEstoque();
               
                if (qtde > stq) {
                    if (stq <= 0) {
                        JOptionPane.showMessageDialog(null, "Desculpe, não temos estoque para esse produto!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Desculpe, temos apenas " + stq + " unidades desse produto!");
                    }
                    JCNomeJogos.setSelectedIndex(0);
                    CampoValor.setText("");
                    formaPagamento.setSelectedIndex(0);
                    jFTDataCompra.setText("");
                    CampoQuantidade.setText("");
                    mFisica.setSelected(false);
                    mDigital.setSelected(false);
                    aux = 1;
                }
            }
            
            System.out.println(nome);
            if (aux == 0) {
                if (forma.equals("Dinheiro")) {
                    JOptionPane.showMessageDialog(null, "Obrigado pela compra. Por favor, dirija-se ao caixa e finalize sua compra!");
                    formaRestante = "-";
                    cont = 1;
                } else if (forma.equals("Cartão de débito")) {
                    JOptionPane.showMessageDialog(null, "Obrigado pela compra. Por favor, dirija-se ao caixa e finalize sua compra!");
                    cont = 1;
                    formaRestante = "-";
                } else if (forma.equals("Cartão de crédito")) {
                    //pedir cliente para digitar cartão de crédito
                    JTextField entrada = new JTextField("");

                    JLabel label = new JLabel("Para efetuar o pagamento do jogo " + nome + " no valor de R$ " + precoTotal + " informe o número do cartão de crédito: ");
                    JOptionPane.showMessageDialog(null, new Object[]{label, entrada});
                    String procura = entrada.getText();

                    //validar cartão
                    if (!"".equals(procura)) {
                        String aCard = "";
                        aCard = procura;
                        if (getCardID(aCard) > -1) {
                            System.out.println("This card is supported.");
                            System.out.println("This a " + getCardName(getCardID(aCard)));
                            String msg = "Cartão aceito! Esse é um cartão " + getCardName(getCardID(aCard));
                            JOptionPane.showMessageDialog(null, msg);
                            cont = 1;
                            formaRestante = "-";
                            try {
                                System.out.println("The card number " + aCard + " is "
                                        + (validCC(aCard) ? " good." : " bad."));
                            } catch (Exception ex) {
                                Logger.getLogger(RealizarCompra.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Esse cartão não é válido ou suportado!");
                            System.out.println("This card is invalid or unsupported!");
                        }
                        //se fechar a tela cancela a operação
                    } else {
                        JOptionPane.showMessageDialog(null, "Operação cancelada!");
                    }
                } else if (forma.equals("Vale-compra")) {
                    //pedir cliente para digitar numero do vale compras
                    JTextField entrada = new JTextField("");
                    JLabel label = new JLabel("Para efetuar o pagamento do jogo " + nome + " no valor de R$ " + precoTotal + " informe a identificação do vale-compras: ");
                    JOptionPane.showMessageDialog(null, new Object[]{label, entrada});
                    String identificacaoValeCompra = entrada.getText();

                    //validar vale-compras
                    if (!"".equals(identificacaoValeCompra)) {
                        ValidarValeCompras valida = new ValidarValeCompras();
                        if (valida.validaValeCompras(identificacaoValeCompra)) {
                            if (valida.verificaValidade(dataCompra)) {
                                valorRestante = valida.verificaValor(precoTotal);
                                if (valorRestante == 0) {
                                    JOptionPane.showMessageDialog(null, "Pagamento efetuado com sucesso. Por favor, dirija-se ao caixa para finalizar sua compra!");
                                    valida.removerValeCompras(identificacaoValeCompra);
                                    cont = 1;
                                    formaRestante = "-";

                                } else {

                                    String[] escolha = {"Cartão de crédito", "Cartão de débito", "Dinheiro"};

                                    String tipo = (String) JOptionPane.showInputDialog(null, "Já foram pagos R$ " + (precoTotal - valorRestante) + ", ainda falta R$ " + valorRestante + ". Por favor, para pagar o restante"
                                            + "informe a forma de pagamento: ",
                                            "Pagamento Restante", JOptionPane.QUESTION_MESSAGE, null, // Use
                                            // default
                                            // icon
                                            escolha, // Array of choices
                                            escolha[0]); // Initial choice
                                    formaRestante = "-";
                                    System.out.println("tipo:" + tipo);
                                    if (tipo == null) {
                                        while (tipo == null) {
                                            tipo = (String) JOptionPane.showInputDialog(null, "Já foram pagos R$ " + (precoTotal - valorRestante) + ", ainda falta R$ " + valorRestante + ". Por favor, para pagar o restante"
                                                    + "informe a forma de pagamento: ",
                                                    "Pagamento Restante", JOptionPane.QUESTION_MESSAGE, null, // Use
                                                    // default
                                                    // icon
                                                    escolha, // Array of choices
                                                    escolha[0]); // Initial choice
                                        }
                                    }
                                    formaRestante = tipo;
                                    System.out.println("Forma de Pagamento restante: " + formaRestante);

                                    if (formaRestante.equals("Cartão de crédito")) {
                                        //pedir cliente para digitar cartão de crédito
                                        entrada = new JTextField("");

                                        label = new JLabel("Para efetuar o pagamento do jogo " + nome + " no valor de R$ " + precoTotal + " informe o número do cartão de crédito: ");
                                        JOptionPane.showMessageDialog(null, new Object[]{label, entrada});
                                        String procura = entrada.getText();

                                        //validar cartão
                                        if (!"".equals(procura)) {
                                            String aCard = "";
                                            aCard = procura;
                                            if (getCardID(aCard) > -1) {
                                                System.out.println("This card is supported.");
                                                System.out.println("This a " + getCardName(getCardID(aCard)));
                                                String msg = "Cartão aceito! Esse é um cartão " + getCardName(getCardID(aCard));
                                                JOptionPane.showMessageDialog(null, msg);
                                                cont = 1;
                                                formaRestante = "-";
                                                try {
                                                    System.out.println("The card number " + aCard + " is "
                                                            + (validCC(aCard) ? " good." : " bad."));
                                                } catch (Exception ex) {
                                                    Logger.getLogger(RealizarCompra.class.getName()).log(Level.SEVERE, null, ex);
                                                }
                                            } else {
                                                JOptionPane.showMessageDialog(null, "Esse cartão não é válido ou suportado!");
                                                System.out.println("This card is invalid or unsupported!");
                                            }
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Obrigado pela compra. Por favor, dirija-se ao caixa e finalize sua compra!");
                                        cont = 1;
                                    }

                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Validade do vale-compra expirou!");
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Vale-compra não disponível. Por favor, tente novamente!");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Operação cancelada!");
                    }

                }
            }
            //inserir dados da compra a ser validada pelo funcionario
            if (cont == 1) {

                String compraAConfirmar = Autenticar.getNome() + "#" + Autenticar.getUser() + "#" + nome + "#" + String.valueOf(qtde) + "#" + dataCompra + "#" + String.valueOf(precoUnitario) + "#" + String.valueOf(precoTotal - valorRestante) + "#"
                        + String.valueOf(valorRestante) + "#" + forma + "#" + String.valueOf(precoTotal) + "#" + midia + "#" + "ConfirmacaoPendente" + "#" + Autenticar.getCpf() + "#" + formaRestante;

                if (midia.equals("Mídia Fisica")) {
                    atualizaJogo(qtde);
                }

                gerarConfirmacaoDeCompra(compraAConfirmar);//escrita em arquivo temporário
                this.dispose();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ainda há dados a serem inseridos!");
        }

        /*   try {
                if (!arq.exists()) {
                    if (arq.createNewFile()) {
                        System.out.println("O arquivo foi criado.");
                    } else {
                        System.out.println("O arquivo não foi criado.");
                    }
                }

                FileInputStream fips = new FileInputStream(arq);
                ObjectInputStream obj = new ObjectInputStream(fips);
                relatorio = (ArrayList<Venda>) obj.readObject();
            } catch (EOFException e) {
            } catch (IOException ex) {
                Logger.getLogger(RealizarCompra.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(RealizarCompra.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                if (mFisica.isSelected()) {
                    midia = mFisica.getText();
                    int cmf = JOptionPane.showConfirmDialog(null, "Nome: " + nome + "\n" + "Preço: " + precoTotal + "\n" + "Mídia: "
                            + midia + "\n" + "Forma de pagamento: " + forma);
                    if (cmf == JOptionPane.YES_OPTION) {

                        relatorio.add(new Venda(nome, precoTotal, midia, forma));

                        FileOutputStream fos = new FileOutputStream(arq);
                        ObjectOutputStream oos = new ObjectOutputStream(fos);

                        oos.writeObject(relatorio);
                        oos.flush();
                        oos.close();

                        atualizaJogo();

                        JOptionPane.showMessageDialog(null, "Obrigado pela visita");
                        this.dispose();
                    }
                } else if (mDigital.isSelected()) {
                    midia = mDigital.getText();

                    int cmd = JOptionPane.showConfirmDialog(null, "Nome: " + JCNomeJogos.getSelectedItem() + "\n" + "Preço: " + CampoValor.getText() + "\n" + "Mídia: "
                            + mDigital.getText() + "\n" + "Forma de pagamento: " + formaPagamento.getSelectedItem());
                    if (cmd == JOptionPane.YES_OPTION) {
                        relatorio.add(new Venda(nome, precoTotal, midia, forma));

                        FileOutputStream fos = new FileOutputStream(arq);
                        ObjectOutputStream oos = new ObjectOutputStream(fos);

                        oos.writeObject(relatorio);
                        oos.flush();
                        oos.close();
                    }
                    JOptionPane.showMessageDialog(null, "Obrigado pela visita");
                    this.dispose();

                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(RealizarCompra.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(RealizarCompra.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        }*/
    }//GEN-LAST:event_ComprarActionPerformed

    private void CampoValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoValorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoValorActionPerformed

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_CancelarActionPerformed

    private void bPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPesquisarActionPerformed

        //Preencher valor de acordo com o nome selecionado
        double preco = 0;
        if (!JCNomeJogos.getSelectedItem().toString().equals("")) {
            for (Jogo jogo : jogos) {
                if (jogo.getNome().equals(JCNomeJogos.getSelectedItem().toString())) {
                    preco = Double.parseDouble(jogo.getPreco());
                }
            }

            CampoValor.setText(preco + "");
            Comprar.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(null, "Nenhum jogo selecionado. Por favor, selecione um jogo!");
        }
    }//GEN-LAST:event_bPesquisarActionPerformed

    private void mDigitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mDigitalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mDigitalActionPerformed

    private void mFisicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mFisicaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mFisicaActionPerformed

    private void CampoValorComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_CampoValorComponentShown


    }//GEN-LAST:event_CampoValorComponentShown

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        //Mostrar jogos disponíveis 
        try {
            FileInputStream fips = new FileInputStream("dadosJogo.txt");
            ObjectInputStream obj = new ObjectInputStream(fips);

            jogos = (ArrayList<Jogo>) obj.readObject();//Carrega o arquivo txt no arrayList

            for (Jogo game : jogos) {
                JCNomeJogos.addItem(game.getNome());
            }

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro na manipulação do arquivo");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro na manipulação do arquivo");

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RealizarCompra.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_formComponentShown

    private void CampoQuantidadeComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_CampoQuantidadeComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoQuantidadeComponentShown

    private void CampoQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoQuantidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoQuantidadeActionPerformed

    private void JCNomeJogosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCNomeJogosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JCNomeJogosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RealizarCompra.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RealizarCompra.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RealizarCompra.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RealizarCompra.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RealizarCompra().setVisible(true);
            }
        });
    }

    /**
     * Método para verificar se há produto em estoque
     *
     * @param quant
     * @return
     */
    public int verificaEstoque() {
        ArrayList<Jogo> vetJogos = new ArrayList<>();
        File arq2 = new File("dadosJogo.txt");
        String nome = JCNomeJogos.getSelectedItem().toString();
        int stq = 0;

        try {

            if (!arq2.exists()) {

                if (arq2.createNewFile()) {
                    System.out.println("O arquivo foi criado");
                } else {
                    System.out.println("O arquivo não foi criado");
                }

            }
            try {
                FileInputStream fileinput = new FileInputStream(arq2);
                ObjectInputStream input = new ObjectInputStream(fileinput);
                //SALVO NO ARRAY O ARQUIVO ORIGINAL
                vetJogos = (ArrayList<Jogo>) input.readObject();

                for (int i = 0; i < vetJogos.size(); i++) {
                    if (vetJogos.get(i).getNome().equals(nome)) {
                        stq = Integer.parseInt(vetJogos.get(i).getQuantidade());
                        return stq;
                    }
                }

                input.close();
                fileinput.close();
            } catch (EOFException e) {

            } catch (FileNotFoundException ex) {
                Logger.getLogger(RealizarCompra.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(RealizarCompra.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(RealizarCompra.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(RealizarCompra.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;

    }

    public void atualizaJogo(int quant) {
        ArrayList<Jogo> vetJogos = new ArrayList<>();
        File arq2 = new File("dadosJogo.txt");
        String nome = JCNomeJogos.getSelectedItem().toString();
        String censura = "";
        String categoria = "";
        String desenvolvedora = "";
        String descricao = "";
        String quantidade = "";// quantidade disponivel no estoque
        String preco = "";
        String estoque = "";
        String tipo = "";

        int stq = 0;
        String auxstq = "";

        try {

            if (!arq2.exists()) {

                if (arq2.createNewFile()) {
                    System.out.println("O arquivo foi criado");
                } else {
                    System.out.println("O arquivo não foi criado");
                }

            }
            try {
                FileInputStream fileinput = new FileInputStream(arq2);
                ObjectInputStream input = new ObjectInputStream(fileinput);
                //SALVO NO ARRAY O ARQUIVO ORIGINAL
                vetJogos = (ArrayList<Jogo>) input.readObject();

                for (int i = 0; i < vetJogos.size(); i++) {
                    if (vetJogos.get(i).getNome().equals(nome)) {

                        preco = vetJogos.get(i).getPreco();
                        censura = vetJogos.get(i).getCensura();
                        categoria = vetJogos.get(i).getCategoria();
                        descricao = vetJogos.get(i).getDescricao();
                        desenvolvedora = vetJogos.get(i).getDesenvolvedora();
                        tipo = vetJogos.get(i).getTipo();

                        stq = Integer.parseInt(vetJogos.get(i).getQuantidade());
                        stq = stq - quant;
                        quantidade = Integer.toString(stq);

                        estoque = vetJogos.get(i).getEstoque();

                        vetJogos.remove(i);

                    }
                }

                input.close();
                fileinput.close();
            } catch (EOFException e) {

            }

            vetJogos.add(new Jogo(nome, censura, categoria, desenvolvedora, descricao, quantidade, preco, estoque, tipo));

            FileOutputStream fo = new FileOutputStream(arq2);
            ObjectOutputStream escreve = new ObjectOutputStream(fo);
            escreve.writeObject(vetJogos);
            escreve.flush();
            escreve.close();
            fo.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CampoQuantidade;
    private javax.swing.JTextField CampoValor;
    private javax.swing.JButton Cancelar;
    private javax.swing.JButton Comprar;
    private javax.swing.JComboBox<String> JCNomeJogos;
    private javax.swing.ButtonGroup Midia;
    private javax.swing.JButton bPesquisar;
    private javax.swing.JLabel compraJogo;
    private javax.swing.JComboBox<String> formaPagamento;
    private javax.swing.JFormattedTextField jFTDataCompra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton mDigital;
    private javax.swing.JRadioButton mFisica;
    private javax.swing.JLabel nome;
    private javax.swing.JLabel valor;
    // End of variables declaration//GEN-END:variables

}
