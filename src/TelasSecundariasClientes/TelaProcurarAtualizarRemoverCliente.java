/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TelasSecundariasClientes;

import codigo.Administrador;
import codigo.Cliente;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author yasmi_78vs0ei
 */
public class TelaProcurarAtualizarRemoverCliente extends javax.swing.JFrame {

    /**
     * Creates new form TelaProcurarAtualizarRemoverCliente
     */
    public TelaProcurarAtualizarRemoverCliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tFEmailCliente = new java.awt.TextField();
        jFCPFCliente = new javax.swing.JFormattedTextField();
        jCBSexoCliente = new javax.swing.JComboBox<>();
        jFCelularCliente = new javax.swing.JFormattedTextField();
        tFNomeCliente = new java.awt.TextField();
        jFDataNascCliente = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tFUserNameCliente = new java.awt.TextField();
        jPFSenha = new javax.swing.JPasswordField();
        jPFConfirmarSenhaCliente = new javax.swing.JPasswordField();
        JBCancelar = new java.awt.Button();
        JBAtualizar = new java.awt.Button();
        JBRemover = new java.awt.Button();
        JBSalvar = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DADOS PESSOAIS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Nome");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("CPF");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Data de Nascimento");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Sexo");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("e-mail");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Celular");

        tFEmailCliente.setMinimumSize(new java.awt.Dimension(60, 22));
        tFEmailCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tFEmailClienteActionPerformed(evt);
            }
        });

        try {
            jFCPFCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jCBSexoCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Feminino", "Masculino" }));

        try {
            jFCelularCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) #####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jFDataNascCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(99, 99, 99)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jFDataNascCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4))
                                    .addComponent(jFCPFCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jCBSexoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tFNomeCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tFEmailCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFCelularCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 13, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(tFNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jFCPFCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jCBSexoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFDataNascCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(tFEmailCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jFCelularCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CADASTRO LOGIN", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Username");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Senha");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Confirmar Senha");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tFUserNameCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addComponent(jPFSenha)
                    .addComponent(jPFConfirmarSenhaCliente))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(tFUserNameCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jPFSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jPFConfirmarSenhaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        JBCancelar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        JBCancelar.setLabel("CANCELAR");
        JBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBCancelarActionPerformed(evt);
            }
        });

        JBAtualizar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        JBAtualizar.setLabel("ATUALIZAR");
        JBAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBAtualizarActionPerformed(evt);
            }
        });

        JBRemover.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        JBRemover.setLabel("REMOVER");
        JBRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBRemoverActionPerformed(evt);
            }
        });

        JBSalvar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        JBSalvar.setLabel("SALVAR");
        JBSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBSalvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(JBAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(JBRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(JBSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JBCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(JBCancelar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(JBSalvar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JBRemover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JBAtualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método para pesquisar um cliente
     * @param CPFCLIENTE recebe cpf do cliente
     */
    public void PesquisarCliente(String CPFCLIENTE){
        String nome = "";
        String cpf = "";
        String sexo = "";
        String dataNasc = "";
        String email = "";
        String celular = "";
  
        String username = "";
        String senha = "*****";
    
         int aux = 0;
        //verificar se usuário não já foi cadastrado
        
            String procura;
            procura = CPFCLIENTE;
            ArrayList<Cliente> cliente = new ArrayList<>();
            try {
                FileInputStream fileinput = new FileInputStream("dadosClientes.txt");
                ObjectInputStream input = new ObjectInputStream(fileinput);
                //guarda o que foi lido no arrayList
                cliente = (ArrayList<Cliente>) input.readObject();

                for (Cliente c : cliente) {
                    if (c.getCPF().equals(CPFCLIENTE)) {
                       nome = c.getNome();
                       cpf = c.getCPF();
                       sexo = c.getSexo();
                       dataNasc = c.getDataNasc();
                       email = c.getEmail();
                       celular = c.getCelular();
                       username = c.getUsername();
                        aux = 1;
                        break;
                    }

                }
                if (aux == 1) { //Foi encontrado administrador com sucesso
                this.setVisible(true);
                tFNomeCliente.setEnabled(false);
                jFCPFCliente.setEnabled(false);
                jCBSexoCliente.setEnabled(false);
                jFDataNascCliente.setEnabled(false);
                tFEmailCliente.setEnabled(false);
                jFCelularCliente.setEnabled(false);
                            
                
                tFUserNameCliente.setEnabled(false);
                jPFConfirmarSenhaCliente.setEnabled(false);
                jPFSenha.setEnabled(false);
                
                tFNomeCliente.setText(nome);
                jFCPFCliente.setText(cpf);
                jCBSexoCliente.setSelectedItem(sexo);
                jFDataNascCliente.setText(dataNasc);
                tFEmailCliente.setText(dataNasc);
                 tFEmailCliente.setText(email);
                jFCelularCliente.setText(celular);
               
                 tFUserNameCliente.setText(username);
                jPFSenha.setText(senha);
                jPFConfirmarSenhaCliente.setText(senha);

                //Caso não exista administrador cadastrado como o cpf procurado
            } else if (aux == 0) {
                JOptionPane.showMessageDialog(null, "Não existe cadastro para o Administrador procurado!");
                MaskFormatter formato = null;
                try {
                    formato = new MaskFormatter("###.###.###-##");
                } catch (ParseException ex) {
                }
                JLabel label = new JLabel("Informe o CPF que deseja procurar: ");
                JFormattedTextField texto = new JFormattedTextField(formato);
                //UIManager.put("OptionPane.okButtonText", "Pesquisar");
                JOptionPane.showMessageDialog(null, new Object[]{label, texto});

                String procuraC = texto.getText();

                //TelaProcurarAtualizarAdm tela = new TelaProcurarAtualizarAdm();
                if (!"   .   .   -  ".equals(procuraC)) {
                    AtualizarCliente(procuraC);
                } else {
                    System.out.println("Sair");
                }
            }

            input.close();

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "OCorreu um erro durante a manipulação do arquivo de dados");
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "OCorreu um erro durante a manipulação do arquivo de dados");
        }
        
    }
    /**
     * Método procura pelo CPF do Cliente que foi solitada a atualização, elibera campos para a atualizaçaõ.
     * @param CPFCLIENTE  recebe o CPF do cliente
     */
    public void AtualizarCliente(String CPFCLIENTE){
        String nome = "";
        String cpf = "";
        String sexo = "";
        String dataNasc = "";
        String email = "";
        String celular = "";
  
        String username = "";
        String senha = "*****";
    
         int aux = 0;
        //verificar se usuário não já foi cadastrado
        
            String procura;
            procura = CPFCLIENTE;
            ArrayList<Cliente> cliente = new ArrayList<>();
            try {
                FileInputStream fileinput = new FileInputStream("dadosClientes.txt");
                ObjectInputStream input = new ObjectInputStream(fileinput);
                //guarda o que foi lido no arrayList
                cliente = (ArrayList<Cliente>) input.readObject();

                for (Cliente c : cliente) {
                    if (c.getCPF().equals(CPFCLIENTE)) {
                       nome = c.getNome();
                       cpf = c.getCPF();
                       sexo = c.getSexo();
                       dataNasc = c.getDataNasc();
                       email = c.getEmail();
                       celular = c.getCelular();
                       username = c.getUsername();
                        aux = 1;
                        break;
                    }

                }
                if (aux == 1) { //Foi encontrado administrador com sucesso
                this.setVisible(true);
                tFNomeCliente.setEnabled(true);
                jFCPFCliente.setEnabled(true);
                jCBSexoCliente.setEnabled(true);
                jFDataNascCliente.setEnabled(true);
                tFEmailCliente.setEnabled(true);
                jFCelularCliente.setEnabled(true);
                            
                
                tFUserNameCliente.setEnabled(true);
                jPFConfirmarSenhaCliente.setEnabled(true);
                jPFSenha.setEnabled(true);


                
                tFNomeCliente.setText(nome);
                jFCPFCliente.setText(cpf);
                jCBSexoCliente.setSelectedItem(sexo);
                jFDataNascCliente.setText(dataNasc);
                tFEmailCliente.setText(dataNasc);
                 tFEmailCliente.setText(email);
                jFCelularCliente.setText(celular);
               
                 tFUserNameCliente.setText(username);
                jPFSenha.setText(senha);
                jPFConfirmarSenhaCliente.setText(senha);

                //Caso não exista administrador cadastrado como o cpf procurado
            } else if (aux == 0) {
                JOptionPane.showMessageDialog(null, "Não existe cadastro para o Administrador procurado!");
                MaskFormatter formato = null;
                try {
                    formato = new MaskFormatter("###.###.###-##");
                } catch (ParseException ex) {
                }
                JLabel label = new JLabel("Informe o CPF que deseja procurar: ");
                JFormattedTextField texto = new JFormattedTextField(formato);
                //UIManager.put("OptionPane.okButtonText", "Pesquisar");
                JOptionPane.showMessageDialog(null, new Object[]{label, texto});

                String procuraC = texto.getText();

                //TelaProcurarAtualizarAdm tela = new TelaProcurarAtualizarAdm();
                if (!"   .   .   -  ".equals(procuraC)) {
                    AtualizarCliente(procuraC);
                } else {
                    System.out.println("Sair");
                }
            }

            input.close();

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "OCorreu um erro durante a manipulação do arquivo de dados");
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "OCorreu um erro durante a manipulação do arquivo de dados");
        }
    }
    private void tFEmailClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tFEmailClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tFEmailClienteActionPerformed

    private void JBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBCancelarActionPerformed
        //se cancelar sai da tela
        this.dispose();
    }//GEN-LAST:event_JBCancelarActionPerformed
/**
 * 
 * @param evt torna os campos editáveis quando o botão atualizar é pressionado 
 */
    private void JBAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBAtualizarActionPerformed
                tFNomeCliente.setEnabled(true);
                jFCPFCliente.setEnabled(true);
                jCBSexoCliente.setEnabled(true);
                jFDataNascCliente.setEnabled(true);
                tFEmailCliente.setEnabled(true);
                jFCelularCliente.setEnabled(true);
                            
                
                tFUserNameCliente.setEnabled(true);
                jPFConfirmarSenhaCliente.setEnabled(true);
                jPFSenha.setEnabled(true);

    }//GEN-LAST:event_JBAtualizarActionPerformed

    private void JBRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBRemoverActionPerformed
        // TODO add your handling code here:
        String remover = jFCPFCliente.getText();
        int posicao = 0;
        int aux = 0;
        try {
            //lendo arquivo com dados dos administradores
            FileInputStream file = new FileInputStream("dadosCliente.txt");
            ObjectInputStream input = new ObjectInputStream(file);

            ArrayList<Cliente> procuraArray = new ArrayList<>();
            procuraArray = (ArrayList) input.readObject();
            for(Cliente C : procuraArray){
                if(C.getCPF().equals(remover)){
                     posicao = procuraArray.indexOf(C);
                     aux = 1;
                }
            }
            input.close();
            if(aux == 1){
            procuraArray.remove(posicao);
            
            FileOutputStream stream = new FileOutputStream("dadosClientes.txt");
            ObjectOutputStream output = new ObjectOutputStream(stream);
            output.writeObject(procuraArray);
            output.flush();
            output.close();
            }
            
            this.dispose();
            JOptionPane.showMessageDialog(null, "Admnistrador removido com sucesso!");
           


          

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "OCorreu um erro durante a manipulação do arquivo de dados");
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "OCorreu um erro durante a manipulação do arquivo de dados");
        }
    }//GEN-LAST:event_JBRemoverActionPerformed
public void RemoverCliente(String CPFCLIENTE){
    PesquisarCliente(CPFCLIENTE);
    
}
    private void JBSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBSalvarActionPerformed
        // TODO add your handling code here:
         String remover = jFCPFCliente.getText();
        int posicao = 0;
        int aux = 0;
        try {
            //lendo arquivo com dados dos administradores
            FileInputStream file = new FileInputStream("dadosCliente.txt");
            ObjectInputStream input = new ObjectInputStream(file);

            ArrayList<Cliente> procuraArray = new ArrayList<>();
            procuraArray = (ArrayList) input.readObject();
            for(Cliente C : procuraArray){
                if(C.getCPF().equals(remover)){
                     posicao = procuraArray.indexOf(C);
                     aux = 1;
                }
            }
            input.close();
            if(aux == 1){
            procuraArray.remove(posicao);
            
            FileOutputStream stream = new FileOutputStream("dadosClientes.txt");
            ObjectOutputStream output = new ObjectOutputStream(stream);
            output.writeObject(procuraArray);
            output.flush();
            output.close();
            }
            
            this.dispose();
            JOptionPane.showMessageDialog(null, "Cliente"
                    + " removido com sucesso!");
           


          

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "OCorreu um erro durante a manipulação do arquivo de dados");
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "OCorreu um erro durante a manipulação do arquivo de dados");
        }
         String nome = "";
        String cpf = "";
        String sexo = "";
        String dataNasc = "";
        String email = "";
        String celular = "";
  
        String username = "";
        String senha = "*****";
        
       nome = tFNomeCliente.getText();
         cpf = jFCPFCliente.getText();
         sexo = jCBSexoCliente.getSelectedItem().toString();
        dataNasc = jFDataNascCliente.getText();
        email =tFEmailCliente.getText();
       celular = jFCelularCliente.getText();

       ArrayList<Cliente> clienteSalvo = new ArrayList<>();
        username = tFUserNameCliente.getText();
        try {
            FileInputStream fileinput = new FileInputStream("dadosClientes.txt");
            //SALVO NO ARRAY O ARQUIVO ORIGINAL
            try (ObjectInputStream input = new ObjectInputStream(fileinput)) {
                //SALVO NO ARRAY O ARQUIVO ORIGINAL
                clienteSalvo = (ArrayList<Cliente>) input.readObject();
                clienteSalvo.add(new Cliente(nome, cpf, dataNasc, sexo, celular, email, username,senha));
                try {
                    FileOutputStream fo = new FileOutputStream("dadosClientes.txt");
                    try (ObjectOutputStream escreve = new ObjectOutputStream(fo)) {
                        escreve.writeObject(clienteSalvo);
                        escreve.flush();
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "OCorreu um erro durante a manipulação do arquivo de dados");
                }
            }
            this.dispose();
            JOptionPane.showMessageDialog(null, "Cadastro Atualizado com Sucesso");
        } catch (EOFException e) {

        } catch (ClassNotFoundException | IOException ex) {
            JOptionPane.showMessageDialog(null, "OCorreu um erro durante a manipulação do arquivo de dados");
        }
    }//GEN-LAST:event_JBSalvarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaProcurarAtualizarRemoverCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaProcurarAtualizarRemoverCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaProcurarAtualizarRemoverCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaProcurarAtualizarRemoverCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaProcurarAtualizarRemoverCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button JBAtualizar;
    private java.awt.Button JBCancelar;
    private java.awt.Button JBRemover;
    private java.awt.Button JBSalvar;
    private javax.swing.JComboBox<String> jCBSexoCliente;
    private javax.swing.JFormattedTextField jFCPFCliente;
    private javax.swing.JFormattedTextField jFCelularCliente;
    private javax.swing.JFormattedTextField jFDataNascCliente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField jPFConfirmarSenhaCliente;
    private javax.swing.JPasswordField jPFSenha;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private java.awt.TextField tFEmailCliente;
    private java.awt.TextField tFNomeCliente;
    private java.awt.TextField tFUserNameCliente;
    // End of variables declaration//GEN-END:variables
}
